<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Lyon's Blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://alawnyan.github.io/"/>
  <updated>2016-02-23T16:11:50.000Z</updated>
  <id>http://alawnyan.github.io/</id>
  
  <author>
    <name><![CDATA[lyon]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[安装Semantic UI]]></title>
    <link href="http://alawnyan.github.io/2016/02/23/%E5%AE%89%E8%A3%85Semantic-UI/"/>
    <id>http://alawnyan.github.io/2016/02/23/安装Semantic-UI/</id>
    <published>2016-02-23T14:47:46.000Z</published>
    <updated>2016-02-23T16:11:50.000Z</updated>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>Semantic UI是比较优秀的完全语义化前端界面开发框架。至于有什么优缺点，因为是刚刚接触，在这里也不敢妄言。<br>先来看看怎么安装吧，</p>
<h2 id="安装nodejs">安装nodejs</h2><p>windows用户可以直接在nodejs官网下载可执行文件进行安装。<br>电脑上有git的用户可以用git进行安装<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone gi<span class="variable">t:</span>//github.<span class="keyword">com</span>/ry/node.git</span><br><span class="line"><span class="keyword">cd</span> node</span><br><span class="line">./configure</span><br><span class="line"><span class="keyword">make</span></span><br><span class="line"><span class="keyword">make</span> install</span><br></pre></td></tr></table></figure></p>
<p>mac和linux用户可以在官网下载对应系统的包进行编译安装，安装步骤与git方法类似，只是多了一步解压包。</p>
<h2 id="安装Gulp">安装Gulp</h2><p>gulp是构建自动化的工具。具体操作看<a href="http://www.gulpjs.com.cn/docs/" target="_blank" rel="external">这里</a><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="operator"><span class="keyword">install</span> -<span class="keyword">g</span> gulp</span></span><br></pre></td></tr></table></figure></p>
<p><em>-g</em>是全局安装</p>
<h2 id="安装semantic_ui">安装semantic ui</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> semantic-ui</span><br></pre></td></tr></table></figure>
<p>安装过程中会出现：</p>
<blockquote>
<p>Automatic (Use defaults locations and all components)<br> Express (Set components and output folder)<br> Custom (Customize all src/dist values)</p>
</blockquote>
<p>Automatic:自动配置<br>Express:快速设置<br>Custom:自定义<br>在这里可以根据自己的实际情况或者喜好进行选择。我呢就偷懒选择auto，接下来选择yes回车。其中最后一句‘Where should we put Semantic UI inside your project? (semantic/)’ 在<em>(semantic/)</em>后面输入你要放semantic ui的目录名称，我直接输来semantic，完了回车即可。最后会看到semantic的文件夹生成，进入semantic这个目录下面，然后再执行编译命令。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> memantic</span><br><span class="line">gulp build</span><br></pre></td></tr></table></figure></p>
<p>最后会在semantic目录生成dist目录，这个里面就是我们所需要的文件：<br>components  semantic.js  semantic.min.js<br>semantic.css  semantic.min.css themes<br>至此我们的semantic ui安装完成。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="前言">前言</h2><p>Semantic UI是比较优秀的完全语义化前端界面开发框架。至于有什么优缺点，因为是刚刚接触，在这里也不敢妄言。<br>先来看看怎么安装吧，</p>
<h2 id="安装nodejs">安装nodejs</h2><p>windows用]]>
    </summary>
    
      <category term="安装semantic" scheme="http://alawnyan.github.io/tags/%E5%AE%89%E8%A3%85semantic/"/>
    
      <category term="semantic" scheme="http://alawnyan.github.io/categories/semantic/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[php生成简单的字符画]]></title>
    <link href="http://alawnyan.github.io/2015/12/05/php%E7%94%9F%E6%88%90%E5%AD%97%E7%AC%A6%E7%94%BB/"/>
    <id>http://alawnyan.github.io/2015/12/05/php生成字符画/</id>
    <published>2015-12-05T08:01:53.000Z</published>
    <updated>2015-12-05T10:26:27.000Z</updated>
    <content type="html"><![CDATA[<h3 id="前言">前言</h3><p>在网上看到用程序生成的字符画，感觉蛮有趣到，自己就找相关的资料也做了个简陋的。其中用到了php的GD库函数以及RGB转换成灰度的计算公式。<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class codeimg &#123;</span><br><span class="line">	</span><br><span class="line">	private function getGray(<span class="variable">$r</span>, <span class="variable">$g</span>, <span class="variable">$b</span>) &#123;  </span><br><span class="line">    	return <span class="number">0</span>.<span class="number">299</span> * <span class="variable">$r</span> + <span class="number">0</span>.<span class="number">578</span> * <span class="variable">$g</span> + <span class="number">0</span>.<span class="number">114</span> * <span class="variable">$b</span>;  </span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	private function code (<span class="variable">$gray</span>) &#123;</span><br><span class="line">		if (<span class="variable">$gray</span> &lt;= <span class="number">30</span>) &#123;</span><br><span class="line">			return <span class="string">'#'</span>;</span><br><span class="line">		&#125; else if (<span class="variable">$gray</span> &gt; <span class="number">30</span> &amp;&amp; <span class="variable">$gray</span> &lt;= <span class="number">60</span>) &#123;</span><br><span class="line">			return <span class="string">'&amp;'</span>;</span><br><span class="line">		&#125; else if (<span class="variable">$gray</span> &gt; <span class="number">60</span> &amp;&amp; <span class="variable">$gray</span> &lt;= <span class="number">120</span>) &#123;</span><br><span class="line">			return <span class="string">'$'</span>;</span><br><span class="line">		&#125;  else if (<span class="variable">$gray</span> &gt; <span class="number">120</span> &amp;&amp; <span class="variable">$gray</span> &lt;= <span class="number">150</span>) &#123;</span><br><span class="line">			return <span class="string">'*'</span>;</span><br><span class="line">		&#125; else if (<span class="variable">$gray</span> &gt; <span class="number">150</span> &amp;&amp; <span class="variable">$gray</span> &lt;= <span class="number">180</span>) &#123;</span><br><span class="line">			return <span class="string">'o'</span>;</span><br><span class="line">		&#125; else if (<span class="variable">$gray</span> &gt; <span class="number">180</span> &amp;&amp; <span class="variable">$gray</span> &lt;= <span class="number">210</span>) &#123;</span><br><span class="line">			return <span class="string">'!'</span>;</span><br><span class="line">		&#125; else if (<span class="variable">$gray</span> &gt; <span class="number">210</span> &amp;&amp; <span class="variable">$gray</span> &lt;= <span class="number">240</span>) &#123;</span><br><span class="line">			return <span class="string">';'</span>;</span><br><span class="line">		&#125;  else &#123;</span><br><span class="line">			return <span class="string">' '</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	private function getRgb (<span class="variable">$img</span>,<span class="variable">$x</span>, <span class="variable">$y</span>) &#123;</span><br><span class="line">		<span class="variable">$rgb</span>  = ImageColorAt(<span class="variable">$img</span>, <span class="variable">$x</span> ,<span class="variable">$y</span>);</span><br><span class="line">		<span class="variable">$r</span> = (<span class="variable">$rgb</span> &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">		<span class="variable">$g</span> = (<span class="variable">$rgb</span> &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">		<span class="variable">$b</span> = <span class="variable">$rgb</span> &amp; <span class="number">0xFF</span>;</span><br><span class="line">		return  <span class="variable">$this-</span>&gt;getGray(<span class="variable">$r</span>, <span class="variable">$g</span>, <span class="variable">$b</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	 </span><br><span class="line">	private function file (<span class="variable">$filetxt</span>,<span class="variable">$str</span>) &#123;	</span><br><span class="line">		<span class="variable">$txt</span> = fopen(<span class="variable">$filetxt</span>, <span class="string">'w+'</span>);</span><br><span class="line">		fwrite(<span class="variable">$txt</span>, <span class="variable">$str</span>);</span><br><span class="line">		fclose(<span class="variable">$txt</span>);		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public function getImg(<span class="variable">$file</span>,<span class="variable">$filetxt</span>) &#123;</span><br><span class="line">	    <span class="variable">$img</span> = imagecreatefromjpeg(<span class="variable">$file</span>);</span><br><span class="line">	    <span class="variable">$w</span> = imagesx(<span class="variable">$img</span>);</span><br><span class="line">	    <span class="variable">$h</span> = imagesy(<span class="variable">$img</span>);</span><br><span class="line">	    <span class="variable">$newimg</span> = imagecreatetruecolor(<span class="variable">$w</span>, <span class="variable">$h</span>);</span><br><span class="line">	    imagecopymergegray(<span class="variable">$newimg</span>,<span class="variable">$img</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="variable">$w</span>,<span class="variable">$h</span>,<span class="number">90</span>);</span><br><span class="line">	    <span class="variable">$str</span> = <span class="string">''</span>;</span><br><span class="line">	    </span><br><span class="line">	    for (<span class="variable">$y</span> = <span class="number">0</span>; <span class="variable">$y</span> &lt; <span class="variable">$h</span>; <span class="variable">$y</span> += <span class="number">6</span>) &#123;</span><br><span class="line">	    	for (<span class="variable">$x</span> = <span class="number">0</span>; <span class="variable">$x</span> &lt; <span class="variable">$w</span>; <span class="variable">$x</span> += <span class="number">4</span>) &#123;</span><br><span class="line">	    		<span class="variable">$str</span> .= <span class="variable">$this-</span>&gt;code(<span class="variable">$this-</span>&gt;getRgb(<span class="variable">$newimg</span> , <span class="variable">$x</span> , <span class="variable">$y</span>));</span><br><span class="line">	    	&#125;</span><br><span class="line">	    	<span class="variable">$str</span> .= PHP_EOL;</span><br><span class="line">	    &#125;</span><br><span class="line">	    </span><br><span class="line">	    <span class="variable">$this-</span>&gt;file(<span class="variable">$filetxt</span>, <span class="variable">$str</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span> = new codeimg();</span><br><span class="line"><span class="variable">$file-</span>&gt;getImg(<span class="string">'1.jpg'</span>, <span class="string">'code.txt'</span>);</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="前言">前言</h3><p>在网上看到用程序生成的字符画，感觉蛮有趣到，自己就找相关的资料也做了个简陋的。其中用到了php的GD库函数以及RGB转换成灰度的计算公式。<br><figure class="highlight xquery"><table><tr><]]>
    </summary>
    
      <category term="php" scheme="http://alawnyan.github.io/tags/php/"/>
    
      <category term="字符画" scheme="http://alawnyan.github.io/tags/%E5%AD%97%E7%AC%A6%E7%94%BB/"/>
    
      <category term="php" scheme="http://alawnyan.github.io/categories/php/"/>
    
  </entry>
  
</feed>
